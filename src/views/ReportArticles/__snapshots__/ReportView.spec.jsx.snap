// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test report article view should match snapshots 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ReportView
    ReportArticleAction={[MockFunction]}
    article={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <form
        onSubmit={[Function]}
      >
        <div
          className="grey-text"
        >
          <t
            className=""
            containerClass=""
            disabled={false}
            error="wrong"
            filled={false}
            gap={false}
            group={true}
            icon=""
            iconBrand={false}
            iconClass=""
            iconLight={false}
            iconRegular={false}
            label="Enter reason here"
            labelClass=""
            name="reason"
            onChange={[Function]}
            required={true}
            size=""
            success="right"
            tag="input"
            type="text"
            validate={true}
            value=""
            valueDefault=""
          />
        </div>
        <t
          className="btn"
          color="primary"
          tag="button"
          type="submit"
        >
          Submit
        </t>
      </form>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="grey-text"
          >
            <t
              className=""
              containerClass=""
              disabled={false}
              error="wrong"
              filled={false}
              gap={false}
              group={true}
              icon=""
              iconBrand={false}
              iconClass=""
              iconLight={false}
              iconRegular={false}
              label="Enter reason here"
              labelClass=""
              name="reason"
              onChange={[Function]}
              required={true}
              size=""
              success="right"
              tag="input"
              type="text"
              validate={true}
              value=""
              valueDefault=""
            />
          </div>,
          <t
            className="btn"
            color="primary"
            tag="button"
            type="submit"
          >
            Submit
          </t>,
        ],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <t
              className=""
              containerClass=""
              disabled={false}
              error="wrong"
              filled={false}
              gap={false}
              group={true}
              icon=""
              iconBrand={false}
              iconClass=""
              iconLight={false}
              iconRegular={false}
              label="Enter reason here"
              labelClass=""
              name="reason"
              onChange={[Function]}
              required={true}
              size=""
              success="right"
              tag="input"
              type="text"
              validate={true}
              value=""
              valueDefault=""
            />,
            "className": "grey-text",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "",
              "containerClass": "",
              "disabled": false,
              "error": "wrong",
              "filled": false,
              "gap": false,
              "group": true,
              "hint": undefined,
              "icon": "",
              "iconBrand": false,
              "iconClass": "",
              "iconLight": false,
              "iconRegular": false,
              "iconSize": undefined,
              "id": undefined,
              "label": "Enter reason here",
              "labelClass": "",
              "name": "reason",
              "onChange": [Function],
              "required": true,
              "size": "",
              "success": "right",
              "tag": "input",
              "type": "text",
              "validate": true,
              "value": "",
              "valueDefault": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Submit",
            "className": "btn",
            "color": "primary",
            "tag": "button",
            "type": "submit",
          },
          "ref": null,
          "rendered": "Submit",
          "type": [Function],
        },
      ],
      "type": "form",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <form
          onSubmit={[Function]}
        >
          <div
            className="grey-text"
          >
            <t
              className=""
              containerClass=""
              disabled={false}
              error="wrong"
              filled={false}
              gap={false}
              group={true}
              icon=""
              iconBrand={false}
              iconClass=""
              iconLight={false}
              iconRegular={false}
              label="Enter reason here"
              labelClass=""
              name="reason"
              onChange={[Function]}
              required={true}
              size=""
              success="right"
              tag="input"
              type="text"
              validate={true}
              value=""
              valueDefault=""
            />
          </div>
          <t
            className="btn"
            color="primary"
            tag="button"
            type="submit"
          >
            Submit
          </t>
        </form>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="grey-text"
            >
              <t
                className=""
                containerClass=""
                disabled={false}
                error="wrong"
                filled={false}
                gap={false}
                group={true}
                icon=""
                iconBrand={false}
                iconClass=""
                iconLight={false}
                iconRegular={false}
                label="Enter reason here"
                labelClass=""
                name="reason"
                onChange={[Function]}
                required={true}
                size=""
                success="right"
                tag="input"
                type="text"
                validate={true}
                value=""
                valueDefault=""
              />
            </div>,
            <t
              className="btn"
              color="primary"
              tag="button"
              type="submit"
            >
              Submit
            </t>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <t
                className=""
                containerClass=""
                disabled={false}
                error="wrong"
                filled={false}
                gap={false}
                group={true}
                icon=""
                iconBrand={false}
                iconClass=""
                iconLight={false}
                iconRegular={false}
                label="Enter reason here"
                labelClass=""
                name="reason"
                onChange={[Function]}
                required={true}
                size=""
                success="right"
                tag="input"
                type="text"
                validate={true}
                value=""
                valueDefault=""
              />,
              "className": "grey-text",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "",
                "containerClass": "",
                "disabled": false,
                "error": "wrong",
                "filled": false,
                "gap": false,
                "group": true,
                "hint": undefined,
                "icon": "",
                "iconBrand": false,
                "iconClass": "",
                "iconLight": false,
                "iconRegular": false,
                "iconSize": undefined,
                "id": undefined,
                "label": "Enter reason here",
                "labelClass": "",
                "name": "reason",
                "onChange": [Function],
                "required": true,
                "size": "",
                "success": "right",
                "tag": "input",
                "type": "text",
                "validate": true,
                "value": "",
                "valueDefault": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Submit",
              "className": "btn",
              "color": "primary",
              "tag": "button",
              "type": "submit",
            },
            "ref": null,
            "rendered": "Submit",
            "type": [Function],
          },
        ],
        "type": "form",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

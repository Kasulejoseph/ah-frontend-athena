// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test SocialLoginView stateful component should match the SocialLoginView snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SocialLoginView
    facebookLogin={
      Object {
        "responseData": Object {
          "errors": Object {
            "auth_token": Array [
              "faked facebook login error",
            ],
          },
          "user": Object {
            "jwt_token": "mocked token",
          },
        },
      }
    }
    facebookLoginActionFunction={[MockFunction]}
    googleLogin={
      Object {
        "responseData": Object {
          "errors": Object {
            "auth_token": Array [
              "faked facebook login error",
            ],
          },
          "user": Object {
            "jwt_token": "mocked token",
          },
        },
      }
    }
    googleLoginActionFunction={[MockFunction]}
    history={
      Object {
        "push": [MockFunction],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "facebookLoginHandler": [Function],
      "googleLoginHandler": [Function],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "facebookLoginHandler": [Function],
        "googleLoginHandler": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
